{"ast":null,"code":"// import { React, useState, useEffect } from 'react'\n// import BootstrapTable from 'react-bootstrap-table-next';\n// import styles from './priceComponent_table.module.scss';\n// import ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\n// import PriceComponent_tableChart from './priceComponent_tableChart';\n// import filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\n// function PriceComponent_table({ brands, changeTableData, tableData, brand }) {\n//     const { SearchBar } = Search;\n//     const [isMobile, setIsMobile] = useState(false);\n//     const [myValue, setMyValue] = useState('all')\n//     const numDiscriminant = (input) => {\n//         return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"/\");\n//     }\n//     const priceMarginColorize = (input) => {\n//         if (input === 0) {\n//             return (\n//                 <p className={`${styles.pPriceMargin} cardSectionPriceMargin_gray`}>\n//                     +{numDiscriminant(input)}\n//                 </p>\n//             )\n//         } else if (input >= 0) {\n//             return (\n//                 <p className={`${styles.pPriceMargin} cardSectionPriceMargin_green`}>\n//                     +{numDiscriminant(input)}\n//                 </p>\n//             )\n//         } else {\n//             return (\n//                 <p className={`${styles.pPriceMargin} cardSectionPriceMargin_red`}>\n//                     {numDiscriminant(input)}\n//                 </p>\n//             )\n//         }\n//     }\n//     const imageFormatter = (cell) => {\n//         return (\n//             <img className={styles.PriceComponent_tableImage} src={cell} />\n//         )\n//     }\n//     const colorFormatter = (cell) => {\n//         return (\n//             <div className={`${styles.PriceComponent_tableColorContainer}`}>\n//                 {cell ?\n//                     cell.map((item, index) => (\n//                         <div key={index} className={styles.PriceComponent_tableColor} style={{ left: (cell.length > 3) ? `${1 * index + 4}vw` : `${1.4 * index + 4}vw`, backgroundColor: item }}></div>\n//                     )) : null\n//                 }\n//             </div>\n//         )\n//     }\n//     const nameFormatter = (cell, row, index,brand) => {\n//         return (\n//             <>\n//                 {row ? (\n//                     <>\n//                         <p className={styles.PriceComponent_tableNamePersian}>{PName[cell[0]]}</p>\n//                         <p className={`${styles.PriceComponent_tableNameEnglish} PriceComponent_tableNameEnglish_color_${cell[1]}`}>{EName[cell[0]]}</p>\n//                         <p className={`${styles.PriceComponent_tableSmallPlus} PriceComponent_tableNameEnglish_color_${cell[1]}`}>{Ram[cell[0]]}/{Ram[cell[0]]}</p>\n//                     </>\n//                 ) :\n//                     null\n//                 }\n//             </>\n//         )\n//     }\n//     const priceFormatter = (cell, row, rowIndex) => {\n//         return (\n//             <>\n//                 {row ? (\n//                     <>\n//                         <span className={styles.PriceComponent_tableChangePrice} style={{ color: (tableData[rowIndex].tag === \"green\" ? \"#68D362\" : (tableData[rowIndex].tag === \"red\" ? \"#E00000\" : \"#9B9B9B\")) }}>{priceMarginColorize(CPrice[cell])}</span>\n//                         <p className={styles.PriceComponent_tablePrice}>{numDiscriminant(PPrice[cell])}</p>\n//                     </>\n//                 ) : null}\n//             </>\n//         )\n//     }\n//     const chartFormatter = (cell) => {\n//         return (\n//             <PriceComponent_tableChart dataChart={cell} />\n//         )\n//     }\n//     const ramFormatter = (cell) => {\n//         return (\n//             <p className={`${styles.PriceComponent_tableRam} `}>{cell}</p>\n//         )\n//     }\n//     const garanteeFormatter = (cell) => {\n//         return (\n//             <>\n//                 <p className={`${styles.PriceComponent_tableGarantee} `}>{cell}</p>\n//             </>\n//         )\n//     }\n//     const commentFormatter = (cell) => {\n//         return (\n//             <p className={styles.PriceComponent_tableComment}>{cell}</p>\n//         )\n//     }\n//     // const caretFormatter = (cell) => {\n//     //     return (\n//     //         <i className=\"fa fa-chevron-circle-up fa-2x\" style={{\n//     //             marginRight: '-33px',\n//     //             paddingLeft: '21vw',\n//     //             paddingTop: '10px'\n//     //         }}></i>\n//     //     )\n//     // }\n//     // const moreFormatter = (cell) => {\n//     //     return (\n//     //         <i className=\"fa fa-info-circle fa-2x\" style={{ marginTop: '3vw' }}></i>\n//     //     )\n//     // }\n//     // const products = []\n//     // tableData.forEach(table => {\n//     //     products.push({\n//     //         more:\"\",\n//     //         icon:table.logo,\n//     //         name:table,\n//     //         ram:table.ram,\n//     //         color:table.backColor,\n//     //         price:table,\n//     //         garantee:table.garantee,\n//     //         comment:table.comment,\n//     //         chart:table.chartData\n//     //     },\n//     //     {\n//     //         caret:\"\",\n//     //         color:table.backColor,\n//     //         garantee:table.garantee\n//     //     })\n//     //   });\n//     // const products =tableData.map((table,index) => ([{id:index,icon: table[index].logo,name: [index,brand],ram: table[index].ram, color: table[index].backColor, price: index, garantee: table[index].garantee, comment: table[index].comment, chart: table[index].chartData}]))\n//     const products = [...tableData]\n//     const products = [\n//         { id: 0, icon: tableData[0].logo, name: [0,brand], ram: tableData[0].ram, color: tableData[0].backColor, price: 0, garantee: tableData[0].garantee, comment: tableData[0].comment, chart: tableData[0].chartData },\n//         { id: 1, icon: tableData[1].logo, name: [1,brand], ram: tableData[1].ram, color: tableData[1].backColor, price: 1, garantee: tableData[1].garantee, comment: tableData[1].comment, chart: tableData[1].chartData },\n//         { id: 2, icon: tableData[2].logo, name: [2,brand], ram: tableData[2].ram, color: tableData[2].backColor, price: 2, garantee: tableData[2].garantee, comment: tableData[2].comment, chart: tableData[2].chartData },\n//     ]\n//     const PName = []\n//     const EName = []\n//     const PPrice = []\n//     const CPrice = []\n//     const Ram = []\n//     tableData.forEach(table => {\n//         PName.push(`${table.persianName}`)\n//         EName.push(`${table.englishName}`)\n//         PPrice.push(`${table.prices.price}`)\n//         CPrice.push(`${table.prices.changePrice}`)\n//         Ram.push(`${table.ram}`)\n//     });\n//     const columns = [\n//         {\n//             dataField: 'icon',\n//             text: 'نام برند',\n//             searchable: false,\n//             formatter: imageFormatter,\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return { width: \"20%\" };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'ram',\n//             text: 'رم/حافظه',\n//             // sort: true,\n//             formatter: ramFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`\n//         },\n//         {\n//             dataField: 'color',\n//             text: 'رنگ',\n//             searchable: false,\n//             formatter: colorFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'prices',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'garantee',\n//             text: 'گارانتی',\n//             formatter: garanteeFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'comment',\n//             text: 'توضیحات',\n//             formatter: commentFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'chart',\n//             text: 'نمودار',\n//             formatter: chartFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         }\n//     ];\n//     const isMobileColumns = [\n//         {\n//             dataField: 'logo',\n//             text: 'نام برند',\n//             searchable: false,\n//             formatter: imageFormatter,\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return { width: \"20%\" };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'price',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         }\n//     ];\n//     const singleColumns = [\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'ram',\n//             text: 'رم/حافظه',\n//             // sort: true,\n//             formatter: ramFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`\n//         },\n//         {\n//             dataField: 'color',\n//             text: 'رنگ',\n//             searchable: false,\n//             formatter: colorFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'price',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'garantee',\n//             text: 'گارانتی',\n//             formatter: garanteeFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'comment',\n//             text: 'توضیحات',\n//             formatter: commentFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'chart',\n//             text: 'نمودار',\n//             formatter: chartFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         }\n//     ];\n//     const isMobileSingleColumns = [\n//         {\n//             dataField: 'icon',\n//             text: 'نام برند',\n//             searchable: false,\n//             formatter: imageFormatter,\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return { width: \"20%\" };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'price',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         }\n//     ];\n//     const defaultSorted = [{\n//         dataField: 'price',\n//         order: 'desc'\n//     }];\n//     useEffect(() => {\n//         if (window.innerWidth < 600) {\n//             setIsMobile(true);\n//             console.log(\"is true\");\n//             window.addEventListener(\"resize\", () => {\n//             if (window.innerWidth < 600) {\n//                 setIsMobile(true);\n//             } else {\n//                 setIsMobile(false);\n//             }\n//         }, false);\n//         } else {\n//             setIsMobile(false);\n//             console.log(\"is false\");\n//             window.addEventListener(\"resize\", () => {\n//                 if (window.innerWidth < 600) {\n//                     setIsMobile(true);\n//                 } else {\n//                     setIsMobile(false);\n//                 }\n//             }, false);\n//         }\n//     }, []);\n//     // expand row\n//     const expandRow = {\n//         // onlyOneExpanding: true,\n//         className: `${styles.PriceComponent_table_expanded} `,\n//         renderer: (row, rowIndex) => {\n//             var table = []\n//             table.push({\n//                 comment: tableData[rowIndex].comment,\n//                 garantee: tableData[rowIndex].garantee,\n//                 backColor: tableData[rowIndex].backColor\n//             })\n//             return (\n//                 <div >\n//                     {console.log(table)}\n//                     {table.map(table => (\n//                         <div className={`d-flex`}>\n//                             {/* <div>{table.backColor}</div> */}\n//                             <div className={`${styles.PriceComponent_tableColorContainer} w-50`}>\n//                                 {table.backColor ?\n//                                 table.backColor.map((item, index) => (\n//                                         <div key={index} className={styles.PriceComponent_tableColor} style={{ left: (item.length > 3) ? `${1 * index + 4}vw` : `${1.4 * index + 4}vw`, backgroundColor: item }}></div>\n//                                     )) : null\n//                                 }\n//                             </div>\n//                             <div style={{width:'35vw'}}>\n//                                 <p className={`${styles.PriceComponent_tableRam} `} >{table.comment}</p>\n//                                 <p className={styles.PriceComponent_tableComment}>{table.garantee}</p>\n//                             </div>\n//                         </div>\n//                     ))}\n//                 </div>\n//             )\n//         },\n//         showExpandColumn: isMobile ? true : false,\n//         expandByColumnOnly: true,\n//         expandHeaderColumnRenderer: ({ isAnyExpands }) => {\n//             if (isAnyExpands) {\n//               return null;\n//             }\n//             return null;\n//           },\n//           expandColumnRenderer: ({ expanded }) => {\n//             if (expanded) {\n//               return (\n//                 <b>\n//                 <i className={`fa fa-chevron-circle-up fa-2x PriceComponent_tableNameEnglish_color_${brand}`} style={{\n//                 paddingTop: '10px'\n//             }}></i>\n//                 </b>\n//               );\n//             }\n//             return (\n//               <b><i className={`fa fa-info-circle fa-2x PriceComponent_tableNameEnglish_color_${brand}`} style={{ marginTop: '3vw' }}></i></b>\n//             );\n//           }\n//     };\n//     return (\n//         <ToolkitProvider\n//             keyField=\"id\"\n//             data={products}\n//             columns={brand === \"AllBrand\" ? isMobile? isMobileColumns:columns : isMobile? isMobileColumns:singleColumns}\n//             // columns={columns}\n//             search\n//             defaultSorted={defaultSorted}\n//         >\n//             {\n//                 props => {\n//                     const TableBottomHeader = () => {\n//                         if (brand === \"AllBrand\") {\n//                             return (\n//                                 <div className={`${styles.priceComponent_tableSearchContainer} justify-content-between d-flex mx-3`}>\n//                                     <div className={`${styles.PriceComponent_tableSearch}`}>\n//                                         <SearchBar\n//                                             {...props.searchProps}\n//                                             placeholder=\"جستجو...\"\n//                                             className={`${styles.priceComponent_tableSearchBox}  `}\n//                                             delay={10}\n//                                         />\n//                                         <img className={styles.priceComponent_tableSearchBoxImg} src=\"/images/sreach.png\" />\n//                                     </div>\n//                                     <div className={`${styles.priceComponent_listBrands_container} ${styles.overflow_ba} `}>\n//                                         <div className={`align-items-center d-flex`}  id=\"myDIV\">\n//                                                     <div className=\"me-3\"></div>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"honor\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"honor\"), setMyValue(\"honor\") }}>\n//                                                         <img src={brands[6].url} className={` ${styles.img_size} ${styles.img_sizeHonor}`} alt=\"honor\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"nokia\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"nokia\"), setMyValue(\"nokia\") }}>\n//                                                         <img src={brands[5].url} className={` ${styles.img_size}`} alt=\"nokia\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"mi\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"mi\"), setMyValue(\"mi\") }}>\n//                                                         <img src={brands[4].url} className={` ${styles.img_size}`} alt=\"mi\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"huawei\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"huawei\"), setMyValue(\"huawei\") }}>\n//                                                         <img src={brands[3].url} className={` ${styles.img_size}`} alt=\"huawei\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"samsung\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"samsung\"), setMyValue(\"samsung\") }}>\n//                                                         <img src={brands[2].url} className={` ${styles.img_size}`} alt=\"samsung\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"apple\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"apple\"), setMyValue(\"apple\") }} >\n//                                                         <img src={brands[1].url} className={` ${styles.img_size} ${styles.priceComponent_tableMenuChildImgApple}`} alt=\"apple\" />\n//                                                     </a>\n//                                                     <a className={`text-decoration-none pb-4 mt-4 ${styles.priceComponent_tableMenuChildImg} ${styles.PriceComponent_tableNamePersian} ${(myValue === \"all\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"all\"), setMyValue(\"all\") }}>\n//                                                         <p className={` ${styles.img_size}`} style={{ whiteSpace: 'nowrap',marginTop: '-4px'}}>{brands[0].name}</p>\n//                                                     </a>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             )\n//                         }\n//                     }\n//                     const TableBottom = () => {\n//                         if (brand === \"AllBrand\") {\n//                             return (\n//                                 <BootstrapTable\n//                                     {...props.baseProps}\n//                                     bordered={false}\n//                                     // hover\n//                                     id={styles.table}\n//                                     bodyClasses={`${styles.priceComponent_tableBody} priceComponent_tableBody_color_${brand}`}\n//                                     headerWrapperClasses={`${styles.priceComponent_tableHeader} priceComponent_tableHeader_color_${brand}`}\n//                                     expandRow={expandRow}\n//                                 />\n//                             )\n//                         }\n//                         else {\n//                             if (isMobile) { \n//                             return (\n//                                 <BootstrapTable\n//                                 {...props.baseProps}\n//                                 bordered={false}\n//                                 // hover\n//                                 id={styles.table}\n//                                 bodyClasses={`${styles.priceComponent_tableBody} priceComponent_tableBody_color_${brand}`}\n//                                 headerWrapperClasses={`${styles.priceComponent_tableHeader} priceComponent_tableHeader_color_${brand}`}\n//                                 headerClasses={isMobile? `${styles.priceComponent_tableHeaderIsMobileColor}` : ''}\n//                                 expandRow={expandRow}\n//                             />\n//                             )} else{\n//                             return (\n//                                 <div className={styles.PriceComponent_tableContainerSingleBrand}>\n//                                     <div className={styles.PriceComponent_tableBodyContainer}>\n//                                         <BootstrapTable\n//                                             {...props.baseProps}\n//                                             bordered={false}\n//                                             // hover\n//                                             id={styles.table}\n//                                             bodyClasses={`${styles.priceComponent_tableBody} priceComponent_tableBody_color_${brand}`}\n//                                             headerWrapperClasses={`${styles.priceComponent_tableHeader} priceComponent_tableHeader_color_${brand}`}\n//                                             headerClasses={isMobile? `${styles.priceComponent_tableHeaderIsMobileColor}` : ''}\n//                                             expandRow={expandRow}\n//                                         />\n//                                     </div>\n//                                     <div className={`${styles.PriceComponent_tableLeftBrand} priceComponent_tableLeftBrand_${brand} ${styles.PriceComponent_tableLeftBrandSmall}`}>\n//                                         <img src={\"/images/mi/mi-logo-listSide.png\"} className={styles.PriceComponent_tableSideImage}></img>\n//                                     </div>\n//                                 </div>\n//                             )\n//                             }\n//                         }\n//                     }\n//                     return (\n//                         <div className={`${styles.priceComponent_tableContainer} priceComponent_tableContainer_color_${brand}`}>\n//                             {TableBottomHeader()}\n//                             {TableBottom()}\n//                         </div>\n//                     )\n//                 }\n//             }\n//         </ToolkitProvider>\n//     )\n// }\n// export default PriceComponent_table","map":{"version":3,"sources":["/Users/yasaman/Documents/alaedinpricepage/alaedinmainwebfront/components/price/priceComponent_table/indexx.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA","sourcesContent":["// import { React, useState, useEffect } from 'react'\n// import BootstrapTable from 'react-bootstrap-table-next';\n// import styles from './priceComponent_table.module.scss';\n// import ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\n// import PriceComponent_tableChart from './priceComponent_tableChart';\n// import filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\n\n\n\n// function PriceComponent_table({ brands, changeTableData, tableData, brand }) {\n//     const { SearchBar } = Search;\n//     const [isMobile, setIsMobile] = useState(false);\n//     const [myValue, setMyValue] = useState('all')\n//     const numDiscriminant = (input) => {\n//         return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"/\");\n//     }\n//     const priceMarginColorize = (input) => {\n//         if (input === 0) {\n//             return (\n//                 <p className={`${styles.pPriceMargin} cardSectionPriceMargin_gray`}>\n//                     +{numDiscriminant(input)}\n//                 </p>\n//             )\n//         } else if (input >= 0) {\n//             return (\n//                 <p className={`${styles.pPriceMargin} cardSectionPriceMargin_green`}>\n//                     +{numDiscriminant(input)}\n//                 </p>\n//             )\n//         } else {\n//             return (\n//                 <p className={`${styles.pPriceMargin} cardSectionPriceMargin_red`}>\n//                     {numDiscriminant(input)}\n//                 </p>\n//             )\n//         }\n//     }\n//     const imageFormatter = (cell) => {\n//         return (\n//             <img className={styles.PriceComponent_tableImage} src={cell} />\n//         )\n//     }\n\n//     const colorFormatter = (cell) => {\n//         return (\n//             <div className={`${styles.PriceComponent_tableColorContainer}`}>\n//                 {cell ?\n\n//                     cell.map((item, index) => (\n//                         <div key={index} className={styles.PriceComponent_tableColor} style={{ left: (cell.length > 3) ? `${1 * index + 4}vw` : `${1.4 * index + 4}vw`, backgroundColor: item }}></div>\n//                     )) : null\n//                 }\n//             </div>\n//         )\n//     }\n\n//     const nameFormatter = (cell, row, index,brand) => {\n//         return (\n//             <>\n\n//                 {row ? (\n//                     <>\n//                         <p className={styles.PriceComponent_tableNamePersian}>{PName[cell[0]]}</p>\n//                         <p className={`${styles.PriceComponent_tableNameEnglish} PriceComponent_tableNameEnglish_color_${cell[1]}`}>{EName[cell[0]]}</p>\n//                         <p className={`${styles.PriceComponent_tableSmallPlus} PriceComponent_tableNameEnglish_color_${cell[1]}`}>{Ram[cell[0]]}/{Ram[cell[0]]}</p>\n//                     </>\n//                 ) :\n//                     null\n//                 }\n//             </>\n//         )\n//     }\n//     const priceFormatter = (cell, row, rowIndex) => {\n//         return (\n//             <>\n//                 {row ? (\n//                     <>\n//                         <span className={styles.PriceComponent_tableChangePrice} style={{ color: (tableData[rowIndex].tag === \"green\" ? \"#68D362\" : (tableData[rowIndex].tag === \"red\" ? \"#E00000\" : \"#9B9B9B\")) }}>{priceMarginColorize(CPrice[cell])}</span>\n//                         <p className={styles.PriceComponent_tablePrice}>{numDiscriminant(PPrice[cell])}</p>\n//                     </>\n//                 ) : null}\n//             </>\n//         )\n//     }\n//     const chartFormatter = (cell) => {\n//         return (\n//             <PriceComponent_tableChart dataChart={cell} />\n//         )\n//     }\n//     const ramFormatter = (cell) => {\n//         return (\n//             <p className={`${styles.PriceComponent_tableRam} `}>{cell}</p>\n//         )\n//     }\n//     const garanteeFormatter = (cell) => {\n//         return (\n//             <>\n//                 <p className={`${styles.PriceComponent_tableGarantee} `}>{cell}</p>\n//             </>\n//         )\n//     }\n//     const commentFormatter = (cell) => {\n//         return (\n//             <p className={styles.PriceComponent_tableComment}>{cell}</p>\n//         )\n//     }\n//     // const caretFormatter = (cell) => {\n//     //     return (\n//     //         <i className=\"fa fa-chevron-circle-up fa-2x\" style={{\n//     //             marginRight: '-33px',\n//     //             paddingLeft: '21vw',\n//     //             paddingTop: '10px'\n//     //         }}></i>\n//     //     )\n//     // }\n//     // const moreFormatter = (cell) => {\n//     //     return (\n//     //         <i className=\"fa fa-info-circle fa-2x\" style={{ marginTop: '3vw' }}></i>\n//     //     )\n//     // }\n//     // const products = []\n//     // tableData.forEach(table => {\n//     //     products.push({\n//     //         more:\"\",\n//     //         icon:table.logo,\n//     //         name:table,\n//     //         ram:table.ram,\n//     //         color:table.backColor,\n//     //         price:table,\n//     //         garantee:table.garantee,\n//     //         comment:table.comment,\n//     //         chart:table.chartData\n//     //     },\n//     //     {\n//     //         caret:\"\",\n//     //         color:table.backColor,\n//     //         garantee:table.garantee\n//     //     })\n//     //   });\n//     // const products =tableData.map((table,index) => ([{id:index,icon: table[index].logo,name: [index,brand],ram: table[index].ram, color: table[index].backColor, price: index, garantee: table[index].garantee, comment: table[index].comment, chart: table[index].chartData}]))\n//     const products = [...tableData]\n//     const products = [\n//         { id: 0, icon: tableData[0].logo, name: [0,brand], ram: tableData[0].ram, color: tableData[0].backColor, price: 0, garantee: tableData[0].garantee, comment: tableData[0].comment, chart: tableData[0].chartData },\n//         { id: 1, icon: tableData[1].logo, name: [1,brand], ram: tableData[1].ram, color: tableData[1].backColor, price: 1, garantee: tableData[1].garantee, comment: tableData[1].comment, chart: tableData[1].chartData },\n//         { id: 2, icon: tableData[2].logo, name: [2,brand], ram: tableData[2].ram, color: tableData[2].backColor, price: 2, garantee: tableData[2].garantee, comment: tableData[2].comment, chart: tableData[2].chartData },\n\n//     ]\n//     const PName = []\n//     const EName = []\n//     const PPrice = []\n//     const CPrice = []\n//     const Ram = []\n//     tableData.forEach(table => {\n//         PName.push(`${table.persianName}`)\n//         EName.push(`${table.englishName}`)\n//         PPrice.push(`${table.prices.price}`)\n//         CPrice.push(`${table.prices.changePrice}`)\n//         Ram.push(`${table.ram}`)\n\n//     });\n//     const columns = [\n//         {\n//             dataField: 'icon',\n//             text: 'نام برند',\n//             searchable: false,\n//             formatter: imageFormatter,\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return { width: \"20%\" };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n\n//         },\n//         {\n//             dataField: 'ram',\n//             text: 'رم/حافظه',\n//             // sort: true,\n//             formatter: ramFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`\n//         },\n//         {\n//             dataField: 'color',\n//             text: 'رنگ',\n//             searchable: false,\n//             formatter: colorFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'prices',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'garantee',\n//             text: 'گارانتی',\n//             formatter: garanteeFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'comment',\n//             text: 'توضیحات',\n//             formatter: commentFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n\n//         },\n//         {\n//             dataField: 'chart',\n//             text: 'نمودار',\n//             formatter: chartFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n\n//         }\n//     ];\n//     const isMobileColumns = [\n//         {\n//             dataField: 'logo',\n//             text: 'نام برند',\n//             searchable: false,\n//             formatter: imageFormatter,\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return { width: \"20%\" };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n\n//         },\n//         {\n//             dataField: 'price',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         }\n//     ];\n//     const singleColumns = [\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n\n//         },\n//         {\n//             dataField: 'ram',\n//             text: 'رم/حافظه',\n//             // sort: true,\n//             formatter: ramFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`\n//         },\n//         {\n//             dataField: 'color',\n//             text: 'رنگ',\n//             searchable: false,\n//             formatter: colorFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'price',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'garantee',\n//             text: 'گارانتی',\n//             formatter: garanteeFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n//         },\n//         {\n//             dataField: 'comment',\n//             text: 'توضیحات',\n//             formatter: commentFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n\n//         },\n//         {\n//             dataField: 'chart',\n//             text: 'نمودار',\n//             formatter: chartFormatter,\n//             headerClasses: `${styles.PriceComponent_table_header}`,\n//             classes: `${styles.PriceComponent_table_header}`,\n\n//         }\n//     ];\n//     const isMobileSingleColumns = [\n//         {\n//             dataField: 'icon',\n//             text: 'نام برند',\n//             searchable: false,\n//             formatter: imageFormatter,\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return { width: \"20%\" };\n//                 }\n//             },\n//         },\n//         {\n//             dataField: 'name',\n//             text: 'نام محصول',\n//             align: 'center',\n//             // formatExtraData : {value1: tableData[0].persianName, value2:tableData[0].englishName},\n//             formatter: nameFormatter,\n//             // formatter: (cell, row) =>(\n//             //     <div>\n//             //         <p>{PName[cell]}</p>\n//             //         <p>{EName[cell]}</p>\n//             //     </div>\n//             //     ), \n//             filterValue: (cell, row) => [PName[cell], EName[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"30%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n\n//         },\n//         {\n//             dataField: 'price',\n//             text: 'قیمت/تومان',\n//             sort: true,\n//             sortFunc: (a, b, order) => {\n//                 if (order === 'desc') return a.price.price > b.price.price ? -1 : 1;\n//                 else { return a.price.price > b.price.price ? 1 : -1 };\n//             },\n//             headerFormatter: (column, index, { sortElement, filterElement }) => {\n//                 // const { caret = 'x' } = sortElement.props;\n//                 return (\n//                     <div className={styles.PriceComponent_tableHeaderCaret}>\n//                         <p>{column.text}</p>\n//                         {sortElement}\n//                     </div>\n//                 );\n//             },\n\n//             formatter: priceFormatter,\n//             filterValue: (cell, row) => [PPrice[cell], CPrice[cell]],\n//             headerStyle: () => {\n//                 if (isMobile) {\n//                     return {\n//                         width: \"35%\",\n//                         textAlign: \"start\"\n//                     };\n//                 }\n//             },\n//         }\n//     ];\n\n//     const defaultSorted = [{\n//         dataField: 'price',\n//         order: 'desc'\n//     }];\n\n\n\n//     useEffect(() => {\n//         if (window.innerWidth < 600) {\n//             setIsMobile(true);\n//             console.log(\"is true\");\n//             window.addEventListener(\"resize\", () => {\n//             if (window.innerWidth < 600) {\n//                 setIsMobile(true);\n//             } else {\n//                 setIsMobile(false);\n//             }\n//         }, false);\n//         } else {\n//             setIsMobile(false);\n//             console.log(\"is false\");\n//             window.addEventListener(\"resize\", () => {\n//                 if (window.innerWidth < 600) {\n//                     setIsMobile(true);\n//                 } else {\n//                     setIsMobile(false);\n//                 }\n//             }, false);\n//         }\n//     }, []);\n\n//     // expand row\n\n//     const expandRow = {\n//         // onlyOneExpanding: true,\n//         className: `${styles.PriceComponent_table_expanded} `,\n//         renderer: (row, rowIndex) => {\n//             var table = []\n//             table.push({\n//                 comment: tableData[rowIndex].comment,\n//                 garantee: tableData[rowIndex].garantee,\n//                 backColor: tableData[rowIndex].backColor\n//             })\n//             return (\n//                 <div >\n//                     {console.log(table)}\n//                     {table.map(table => (\n//                         <div className={`d-flex`}>\n//                             {/* <div>{table.backColor}</div> */}\n//                             <div className={`${styles.PriceComponent_tableColorContainer} w-50`}>\n//                                 {table.backColor ?\n\n//                                 table.backColor.map((item, index) => (\n//                                         <div key={index} className={styles.PriceComponent_tableColor} style={{ left: (item.length > 3) ? `${1 * index + 4}vw` : `${1.4 * index + 4}vw`, backgroundColor: item }}></div>\n//                                     )) : null\n//                                 }\n//                             </div>\n//                             <div style={{width:'35vw'}}>\n//                                 <p className={`${styles.PriceComponent_tableRam} `} >{table.comment}</p>\n//                                 <p className={styles.PriceComponent_tableComment}>{table.garantee}</p>\n//                             </div>\n//                         </div>\n//                     ))}\n//                 </div>\n\n//             )\n//         },\n//         showExpandColumn: isMobile ? true : false,\n//         expandByColumnOnly: true,\n//         expandHeaderColumnRenderer: ({ isAnyExpands }) => {\n//             if (isAnyExpands) {\n//               return null;\n//             }\n//             return null;\n//           },\n//           expandColumnRenderer: ({ expanded }) => {\n//             if (expanded) {\n//               return (\n//                 <b>\n//                 <i className={`fa fa-chevron-circle-up fa-2x PriceComponent_tableNameEnglish_color_${brand}`} style={{\n//                 paddingTop: '10px'\n//             }}></i>\n//                 </b>\n//               );\n//             }\n//             return (\n//               <b><i className={`fa fa-info-circle fa-2x PriceComponent_tableNameEnglish_color_${brand}`} style={{ marginTop: '3vw' }}></i></b>\n//             );\n//           }\n//     };\n\n//     return (\n\n//         <ToolkitProvider\n//             keyField=\"id\"\n//             data={products}\n//             columns={brand === \"AllBrand\" ? isMobile? isMobileColumns:columns : isMobile? isMobileColumns:singleColumns}\n//             // columns={columns}\n//             search\n//             defaultSorted={defaultSorted}\n//         >\n//             {\n//                 props => {\n\n//                     const TableBottomHeader = () => {\n//                         if (brand === \"AllBrand\") {\n//                             return (\n//                                 <div className={`${styles.priceComponent_tableSearchContainer} justify-content-between d-flex mx-3`}>\n//                                     <div className={`${styles.PriceComponent_tableSearch}`}>\n\n\n//                                         <SearchBar\n//                                             {...props.searchProps}\n//                                             placeholder=\"جستجو...\"\n//                                             className={`${styles.priceComponent_tableSearchBox}  `}\n//                                             delay={10}\n//                                         />\n//                                         <img className={styles.priceComponent_tableSearchBoxImg} src=\"/images/sreach.png\" />\n//                                     </div>\n//                                     <div className={`${styles.priceComponent_listBrands_container} ${styles.overflow_ba} `}>\n//                                         <div className={`align-items-center d-flex`}  id=\"myDIV\">\n//                                                     <div className=\"me-3\"></div>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"honor\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"honor\"), setMyValue(\"honor\") }}>\n//                                                         <img src={brands[6].url} className={` ${styles.img_size} ${styles.img_sizeHonor}`} alt=\"honor\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"nokia\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"nokia\"), setMyValue(\"nokia\") }}>\n//                                                         <img src={brands[5].url} className={` ${styles.img_size}`} alt=\"nokia\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"mi\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"mi\"), setMyValue(\"mi\") }}>\n//                                                         <img src={brands[4].url} className={` ${styles.img_size}`} alt=\"mi\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"huawei\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"huawei\"), setMyValue(\"huawei\") }}>\n//                                                         <img src={brands[3].url} className={` ${styles.img_size}`} alt=\"huawei\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"samsung\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"samsung\"), setMyValue(\"samsung\") }}>\n//                                                         <img src={brands[2].url} className={` ${styles.img_size}`} alt=\"samsung\" />\n//                                                     </a>\n//                                                     <a className={`mt-4 ${styles.priceComponent_tableMenuChildImg} ${(myValue === \"apple\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"apple\"), setMyValue(\"apple\") }} >\n//                                                         <img src={brands[1].url} className={` ${styles.img_size} ${styles.priceComponent_tableMenuChildImgApple}`} alt=\"apple\" />\n//                                                     </a>\n//                                                     <a className={`text-decoration-none pb-4 mt-4 ${styles.priceComponent_tableMenuChildImg} ${styles.PriceComponent_tableNamePersian} ${(myValue === \"all\") ? styles.priceComponent_tableMenuChildHovered : ''}`} onClick={() => { changeTableData(\"all\"), setMyValue(\"all\") }}>\n//                                                         <p className={` ${styles.img_size}`} style={{ whiteSpace: 'nowrap',marginTop: '-4px'}}>{brands[0].name}</p>\n//                                                     </a>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             )\n//                         }\n//                     }\n//                     const TableBottom = () => {\n//                         if (brand === \"AllBrand\") {\n//                             return (\n//                                 <BootstrapTable\n//                                     {...props.baseProps}\n//                                     bordered={false}\n//                                     // hover\n//                                     id={styles.table}\n//                                     bodyClasses={`${styles.priceComponent_tableBody} priceComponent_tableBody_color_${brand}`}\n//                                     headerWrapperClasses={`${styles.priceComponent_tableHeader} priceComponent_tableHeader_color_${brand}`}\n                                    \n//                                     expandRow={expandRow}\n\n//                                 />\n//                             )\n//                         }\n//                         else {\n//                             if (isMobile) { \n//                             return (\n//                                 <BootstrapTable\n//                                 {...props.baseProps}\n//                                 bordered={false}\n//                                 // hover\n//                                 id={styles.table}\n//                                 bodyClasses={`${styles.priceComponent_tableBody} priceComponent_tableBody_color_${brand}`}\n//                                 headerWrapperClasses={`${styles.priceComponent_tableHeader} priceComponent_tableHeader_color_${brand}`}\n//                                 headerClasses={isMobile? `${styles.priceComponent_tableHeaderIsMobileColor}` : ''}\n//                                 expandRow={expandRow}\n\n//                             />\n//                             )} else{\n//                             return (\n//                                 <div className={styles.PriceComponent_tableContainerSingleBrand}>\n//                                     <div className={styles.PriceComponent_tableBodyContainer}>\n//                                         <BootstrapTable\n//                                             {...props.baseProps}\n//                                             bordered={false}\n//                                             // hover\n//                                             id={styles.table}\n//                                             bodyClasses={`${styles.priceComponent_tableBody} priceComponent_tableBody_color_${brand}`}\n//                                             headerWrapperClasses={`${styles.priceComponent_tableHeader} priceComponent_tableHeader_color_${brand}`}\n//                                             headerClasses={isMobile? `${styles.priceComponent_tableHeaderIsMobileColor}` : ''}\n//                                             expandRow={expandRow}\n\n//                                         />\n//                                     </div>\n//                                     <div className={`${styles.PriceComponent_tableLeftBrand} priceComponent_tableLeftBrand_${brand} ${styles.PriceComponent_tableLeftBrandSmall}`}>\n//                                         <img src={\"/images/mi/mi-logo-listSide.png\"} className={styles.PriceComponent_tableSideImage}></img>\n//                                     </div>\n//                                 </div>\n//                             )\n//                             }\n//                         }\n//                     }\n//                     return (\n//                         <div className={`${styles.priceComponent_tableContainer} priceComponent_tableContainer_color_${brand}`}>\n//                             {TableBottomHeader()}\n//                             {TableBottom()}\n//                         </div>\n//                     )\n//                 }\n//             }\n//         </ToolkitProvider>\n\n//     )\n// }\n\n\n// export default PriceComponent_table\n\n"]},"metadata":{},"sourceType":"script"}